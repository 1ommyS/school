<?phpnamespace App\Http\Controllers\Roles;use App\Http\Controllers\Controller;use App\libs\Sberbank;use App\Models\{Group, Mark, Order, StudentGroups, User};use App\Repositories\Implementations\{StudentRepository};use App\Services\Implementations\{BalanceService, StudentService};use Illuminate\Http\Request;use Illuminate\Support\Facades\{Auth, DB, Validator};class StudentController extends Controller{    private BalanceService $balance;    private StudentRepository $repo;    private StudentService $service;    public function __construct ()    {        $this->balance = new BalanceService();        $this->repo = new StudentRepository();        $this->service = new StudentService();    }    public function delete (Request $request, int $id)    {        Mark::where("group_id", $id)->delete();        return redirect()->back()->with("message", "Успешно удалено");    }    public function marks (Request $request, int $id)    {        $decode_request = [];        if ( !empty(file_get_contents("php://input")) )            $decode_request = json_decode(file_get_contents("php://input"));        $dates = [];        $datesFromDB = [];        if ( empty(file_get_contents("php://input")) )            $datesFromDB = Mark::select("created_at")->where("group_id", $id)->get()->unique("created_at");        else {            $datesFromDB = Mark::select("created_at")->where([                [                    "group_id",                    $id                ],                [                    "created_at",                    ">=",                    "{$decode_request->start} 00:00:00"                ],                [                    "created_at",                    "<=",                    "{$decode_request->finish} 23:59:59"                ]            ])->get()->unique("created_at");        }        $start = $decode_request->start ?? date("Y-m-d");        $finish = $decode_request->finish ?? date("Y-m-d");        foreach ( $datesFromDB as $item ) {            $dates[] = date("d.m.Y", strtotime($item->created_at));        }        $student_ids = Mark::where("group_id", $id)->get()->unique("student_id");        $students_info = [];        $summary_mark_info = [];        $names = [];        foreach ( $student_ids as $student ) {            $name = User::where("id", $student->student_id)->first()->name;            $names[] = $name;            $summary_mark_info[] = [                "sum" => (int) Mark::where([                    [                        "group_id",                        $id                    ],                    [                        "student_id",                        $student->student_id                    ]                ])->sum("mark"),                "name" => $name,            ];            $marks_collections = Mark::where("student_id", $student->student_id)->orderBy("created_at")->get();            $marks = [];            foreach ( $marks_collections as $mark ) {                $marks[] = $mark->mark;            }            $students_info[] = [                "name" => $name,                "marks" => $marks            ];        }        return json_encode([            "dates" => $dates,            "marks" => $students_info,            "id" => $id,            "finish" => $finish,            "start" => $start,            "names" => $names,            "summary_marks" => $summary_mark_info        ]);    }    public function marksView (Request $request, int $id)    {        return view("pages.student.marks", ["id" => $id]);    }    /**     * index page ( GET: /profile )     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function show (Request $request)    {        $student_groups = StudentGroups::select("*")->where('student_id', Auth::user()->id)->get();        $student_groups_information = [];        foreach ( $student_groups as $student_group ) {            $groups = Group::where('id', '=', $student_group->group_id)->get();            foreach ( $groups as $group ) {                $student_groups_information[] = [                    'balance' => $student_group->balance,                    'bonuses' => $student_group->count_bonus_lessons,                    'group' => $group,                ];            }        }        return view('pages.student.index', compact("student_groups_information"));    }    /**     * payPage     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function payPage (Request $request, $id)    {        $group_age = Group::select(['age'])            ->where('id', $id)            ->first()            ->age;        return view('pages.student.pay', compact('id', 'group_age'));    }    /**     * send Request to Sberbank with payment body     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function save (Request $request, $id)    {        return redirect()->route('profile');    }    /**     * get Response from Sberbank and save payment to DB     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Http\RedirectResponse     */    public function storePayment (Request $request, $id)    {        $user_id = Auth::user()->id;        DB::table("order_ids")->insert(['id' => $request->get("orderId")]);            session('balance_update', $this->balance->updateBalance(($request->amount / 100), $id, Auth::user()->id));        session()->flash("success", 'Платеж успешно проведен');        return redirect()->route('profile');    }    /**     * page with lessons history     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function history (Request $request, $id)    {        $lessons_from_db = DB::table("student_lessons")            ->select()            ->where([                [                    'group_id',                    $id,                ],                [                    'student_id',                    Auth::user()->id,                ],            ])            ->orderBy('date')            ->get();        $name_group = Group::select('name_group')            ->where('id', $id)            ->first()            ->name_group;        $lessons = [];        foreach ( $lessons_from_db as $item ) {            $color = "";            if ( $item->balance_lesson < 500 ) {                $color = "#FF8F88";            } elseif ( $item->balance_lesson >= 500 && $item->balance_lesson <= 1650 ) {                $color = "#FFD37F";            } else {                $color = "#9CE1C6";            }            $lessons[] = [                "lesson" => $item,                'name_group' => $name_group,                'color' => $color,            ];        }        $payments = [            '0' => '<i class="fa fa-minus-circle" aria-hidden="true"></i>',            '1' => '<svg enable-background="new 0 0 32 32" height="32px" id="svg2" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"><g id="background"><rect fill="none" height="32" width="32" x="1" y="1"/></g><g id="book_x5F_sans"><g><path d="M27.002,1v1.999h-2V5h2v28h-24c0,0-2,0-2-2V4.018c0-0.006-0.001-0.012-0.001-0.018C0.966,2.645,1.808,1.686,2.556,1.354    C3.294,0.992,3.918,1.004,4.002,1H27.002 M3.998,5C4,5,4.002,5,4.002,5h19V2.999h-19C4,3.005,3.97,2.997,3.853,3.018    c-0.115,0.019-0.274,0.06-0.404,0.125C3.196,3.314,3.035,3.353,3.002,4c0.015,0.5,0.134,0.609,0.272,0.743    c0.144,0.126,0.401,0.212,0.579,0.239C3.948,4.999,3.986,5,3.998,5 M5.002,31h20V7h-20V31"/></g></g></svg>',            '2' => '<svg enable-background="new 0 0 32 32" height="32px" id="svg2" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"><g id="background"><rect fill="none" height="32" width="32"/></g><g id="book_x5F_sans_x5F_remove"><g><g><path d="M32,23.001c0-3.917-2.506-7.239-5.998-8.478V4h-2V1.999h2V0h-23C2.918,0.004,2.294-0.008,1.556,0.354     C0.808,0.686-0.034,1.645,0.001,3c0,0.006,0.001,0.012,0.001,0.018V30c0,2,2,2,2,2h21.081l-0.007-0.004     C28.013,31.955,32,27.946,32,23.001z M2.853,3.981C2.675,3.955,2.418,3.869,2.274,3.743C2.136,3.609,2.017,3.5,2.002,3     c0.033-0.646,0.194-0.686,0.447-0.856c0.13-0.065,0.289-0.107,0.404-0.125C2.97,1.997,3,2.005,3.002,1.999h19V4h-19     C3,4,2.97,4.002,2.853,3.981z M4.002,30V6h20v8.06C23.673,14.023,23.339,14,23,14c-4.972,0-9,4.029-9,9.001     c0,2.829,1.307,5.35,3.348,6.999H4.002z M23,30c-3.865-0.008-6.994-3.135-7-6.999c0.006-3.865,3.135-6.995,7-7.001     c3.865,0.006,6.992,3.136,7,7.001C29.992,26.865,26.865,29.992,23,30z"/></g></g><g><rect height="2" width="10" x="18" y="22"/></g></g></svg>',            '3' => '<svg enable-background="new 0 0 24 24" height="24px" id="Layer_1" version="1.1" viewBox="0 0 24 24" width="24px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path clip-rule="evenodd" d="M22.506,21v0.016L17,15.511V19c0,1.105-0.896,2-2,2h-1.5H3H2c-1.104,0-2-0.895-2-2  v-1l0,0V6l0,0V5c0-1.104,0.896-1.999,2-1.999h1l0,0h10.5l0,0H15c1.104,0,2,0.895,2,1.999v3.516l5.5-5.5V3.001  c0.828,0,1.5,0.671,1.5,1.499v15C24,20.327,23.331,20.996,22.506,21z" fill-rule="evenodd"/></svg>',        ];        return view('pages.student.history', compact('lessons', 'payments'));    }    /**     * page with payments history     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function payments (Request $request, $id)    {        $payments = DB::table('transactions')            ->select()            ->where([                [                    'student_id',                    '=',                    Auth::user()->id,                ],                [                    'group_id',                    '=',                    $id,                ],            ])            ->orderBy('date_transaction', 'desc')            ->get();        $name_group = Group::select('name_group')            ->where('id', $id)            ->first()            ->name_group;        $payments_info = [];        foreach ( $payments as $payment ) {            $payments_info[] = [                'payment_info' => $payment,                'name_group' => $name_group,            ];        }        return view('pages.student.payments', compact("payments_info"));    }    /**     * settings form     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function settingsPage (Request $request)    {        return view('pages.student.settings');    }    /**     * POST: /profile/settings     * Save new settings     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Http\RedirectResponse     * @throws \Illuminate\Validation\ValidationException     */    public function store (Request $request)    {        $rules = [            'login' => 'required  ',            'password' => 'required',            'name' => 'required',            'city' => 'required',            'phone_student' => 'required',            'phone_parent' => 'required',            'birthday' => 'required',            "parent_vk" => "required",            'age' => 'required',            'link_vk' => 'required',            'name_parent' => 'required',        ];        $messages = [            'name.required' => 'Укажите своё имя',            'password.required' => 'Укажите свой пароль',            'login.required' => 'Укажите свой логин',            'city.required' => 'Укажите город своего проживания',            'phone_student.required' => 'Укажите свой телефон',            'phone_parent.required' => 'Укажите телефон своего родителя',            'birthday.required' => 'Укажите дату своего рождения',            'link_vk.required' => 'Укажите свой VK',            'name_parent.required' => 'Укажите имя своего родителя',            'age.required' => 'Укажите свой возраст',            "parent_vk.required" => "Укажите ВК родителя"        ];        $validator = Validator::make($request->all(), $rules, $messages)->validate();        $this->repo->saveStudent(Auth::id(), $request);        session()->flash('success', 'Вы успешно обновили свои данные');        return redirect()->back();    }}