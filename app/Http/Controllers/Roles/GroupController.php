<?phpnamespace App\Http\Controllers\Roles;use App\Http\Controllers\Controller;use App\Models\Group;use App\Models\User;use App\Repositories\Implementations\GroupRepository;use App\Repositories\Implementations\LessonRepository;use App\Repositories\Implementations\UserRepository;use Illuminate\Http\Request;use Illuminate\Support\Facades\DB;class GroupController extends Controller{    private Group $model;    private UserRepository $userRepo;    private LessonRepository $lessonRepo;    private GroupRepository $groupRepo;    /**     * GroupController constructor.     * @param \App\Models\Group $model     * @param \App\Repositories\Implementations\UserRepository $userRepo     * @param \App\Repositories\Implementations\LessonRepository $lessonRepo     * @param \App\Repositories\Implementations\GroupRepository $groupRepo     */    public function __construct (Group $model, UserRepository $userRepo, LessonRepository $lessonRepo, GroupRepository $groupRepo)    {        $this->groupRepo = $groupRepo;        $this->lessonRepo = $lessonRepo;        $this->userRepo = $userRepo;        $this->model = $model;    }    /**     * list of students in group     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function students (Request $request, $id)    {        $this->groupRepo = new GroupRepository();        $students_collection = $this->groupRepo->getStudentsDataInGroup($id);        $students = [];        foreach ( $students_collection as $student ) {            $students[] = [                'student' => User::select('name', 'id')->where('id', $student->student_id)->first(),                'balance' => $student->balance,                'bonus_lessons' => $student->count_bonus_lessons            ];        }        return view('pages.group.mystudents', compact('students', 'id'));    }    /**     * information about student     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function student (Request $request, $student_id, $group_id)    {        $student_info = $this->userRepo->getUserById($student_id);        $student_info->birthday = date("d-m-Y", strtotime($student_info->birthday));        $exempt = DB::table('student_groups')            ->select('exempt')            ->where([                [                    'student_id',                    $student_id                ],                [                    'group_id',                    $group_id                ]            ])->first()->exempt;        $transactions = DB::table('transactions')            ->select()            ->where([                [                    'student_id',                    $student_id                ],                [                    'group_id',                    $group_id                ]            ])            ->orderBy("date_transaction")            ->get();        $ages = [            1 => "Школьник",            2=> "Cтудент",            3=>"Взрослый",        ];        $finished = [            'Нет',            'Да',        ];        return view('pages.group.student', compact('student_info', 'transactions', 'ages', 'finished', 'exempt', 'student_id', 'group_id'));    }    /**     * page with lessons     * @param \Illuminate\Http\Request $request     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function index (Request $request, $group_id)    {        $title = $this->groupRepo->getGroupName($group_id);        $dates = $this->lessonRepo->getLessonsDates($group_id);        $students_with_payments = $this->groupRepo->getGroupMembersWithPayments($group_id);        $is_archive = $this->model->isArchive($group_id);        $days = [            1 => 'Пн.',            'Вт.',            'Ср.',            'Чт.',            'Пт.',            'Сб.',            'Вс.'        ];        $format_dates = [];        foreach ( $dates as $date ) {            $copyDate = explode("-", $date['date']);            $copyDate = array_reverse($copyDate);            $copyDate = implode("-", $copyDate);            $dayWeek = $days[date('N', strtotime($date['date']))];            $format_dates[] = [                'date' => $date['date'],                'day_week' => $dayWeek,                'lesson_number' => $date['lesson_number']            ];        }        $payments = [            '0' => '<i class="fa fa-minus-circle" aria-hidden="true"></i>',            '1' => '<svg enable-background="new 0 0 32 32" height="32px" id="svg2" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"><g id="background"><rect fill="none" height="32" width="32" x="1" y="1"/></g><g id="book_x5F_sans"><g><path d="M27.002,1v1.999h-2V5h2v28h-24c0,0-2,0-2-2V4.018c0-0.006-0.001-0.012-0.001-0.018C0.966,2.645,1.808,1.686,2.556,1.354    C3.294,0.992,3.918,1.004,4.002,1H27.002 M3.998,5C4,5,4.002,5,4.002,5h19V2.999h-19C4,3.005,3.97,2.997,3.853,3.018    c-0.115,0.019-0.274,0.06-0.404,0.125C3.196,3.314,3.035,3.353,3.002,4c0.015,0.5,0.134,0.609,0.272,0.743    c0.144,0.126,0.401,0.212,0.579,0.239C3.948,4.999,3.986,5,3.998,5 M5.002,31h20V7h-20V31"/></g></g></svg>',            '2' => '<svg enable-background="new 0 0 32 32" height="32px" id="svg2" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg"><g id="background"><rect fill="none" height="32" width="32"/></g><g id="book_x5F_sans_x5F_remove"><g><g><path d="M32,23.001c0-3.917-2.506-7.239-5.998-8.478V4h-2V1.999h2V0h-23C2.918,0.004,2.294-0.008,1.556,0.354     C0.808,0.686-0.034,1.645,0.001,3c0,0.006,0.001,0.012,0.001,0.018V30c0,2,2,2,2,2h21.081l-0.007-0.004     C28.013,31.955,32,27.946,32,23.001z M2.853,3.981C2.675,3.955,2.418,3.869,2.274,3.743C2.136,3.609,2.017,3.5,2.002,3     c0.033-0.646,0.194-0.686,0.447-0.856c0.13-0.065,0.289-0.107,0.404-0.125C2.97,1.997,3,2.005,3.002,1.999h19V4h-19     C3,4,2.97,4.002,2.853,3.981z M4.002,30V6h20v8.06C23.673,14.023,23.339,14,23,14c-4.972,0-9,4.029-9,9.001     c0,2.829,1.307,5.35,3.348,6.999H4.002z M23,30c-3.865-0.008-6.994-3.135-7-6.999c0.006-3.865,3.135-6.995,7-7.001     c3.865,0.006,6.992,3.136,7,7.001C29.992,26.865,26.865,29.992,23,30z"/></g></g><g><rect height="2" width="10" x="18" y="22"/></g></g></svg>',            '3' => '<svg enable-background="new 0 0 24 24" height="24px" id="Layer_1" version="1.1" viewBox="0 0 24 24" width="24px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path clip-rule="evenodd" d="M22.506,21v0.016L17,15.511V19c0,1.105-0.896,2-2,2h-1.5H3H2c-1.104,0-2-0.895-2-2  v-1l0,0V6l0,0V5c0-1.104,0.896-1.999,2-1.999h1l0,0h10.5l0,0H15c1.104,0,2,0.895,2,1.999v3.516l5.5-5.5V3.001  c0.828,0,1.5,0.671,1.5,1.499v15C24,20.327,23.331,20.996,22.506,21z" fill-rule="evenodd"/></svg>',        ];        return view('pages.group.index', compact('title', 'students_with_payments', 'is_archive', 'format_dates', 'group_id', 'payments'));    }    /**     * kick student from group     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function deleteStudent (Request $request, $student_id, $group_id)    {        $this->groupRepo->deleteStudent($group_id, $student_id);        session()->flash("success", "Пользователь удалён из группы");        return redirect("/group/{$group_id}");    }    /**     * archive group     * @param \Illuminate\Http\Request $request     * @param $group_id     * @return \Illuminate\Http\RedirectResponse     */    public function archive (Request $request, $group_id)    {        $this->groupRepo->acrhiveGroup($group_id);        session()->flash("success", "Группа выпущена");        return redirect()->back();    }    /**     * make student "exempt"     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function exempt (Request $request, $student_id, $group_id)    {        $this->groupRepo->makeExempt($group_id, $student_id);        session()->flash("success", "Пользователь отмечен как льготником");        return redirect("/group/{$group_id}");    }    /**     * remove status "exempt"     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function offexempt (Request $request, $student_id, $group_id)    {        $this->groupRepo->removeExempt($group_id, $student_id);        session()->flash("success", "Пользователь отмечен как льготником");        return redirect("/group/{$group_id}");    }    /**     * add payment to student if he make payment by bank system (card)     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function addpayment (Request $request, $student_id, $group_id)    {        $this->groupRepo->addPayment($group_id, $student_id, $request->value, $request->date);        session()->flash("success", "Платёж добавлен");        return redirect("/group/{$group_id}");    }    /**     * add bonus if were any conditios about cost     * @param \Illuminate\Http\Request $request     * @param $student_id     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector     */    public function addbonus (Request $request, $student_id, $group_id)    {        $this->groupRepo->addBonus($group_id, $student_id, $request->value);        session()->flash("success", "Бонусы добавлены");        return redirect("/group/{$group_id}");    }}