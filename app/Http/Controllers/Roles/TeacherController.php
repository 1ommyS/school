<?phpnamespace App\Http\Controllers\Roles;use App\Enums\Roles;use App\Http\Controllers\Controller;use App\Http\Requests\TeacherRequest;use App\Models\Group;use App\Models\Student;use App\Models\StudentGroups;use App\Models\Teacher;use App\Models\User;use App\Repositories\Implementations\GroupRepository;use App\Repositories\Implementations\LessonRepository;use App\Repositories\Implementations\StudentRepository;use App\Repositories\Implementations\UserRepository;use Illuminate\Http\Request;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\Validator;class TeacherController extends Controller{    private GroupRepository $groupRepo;    private LessonRepository $lessonRepo;    private StudentRepository $studentRepo;    private UserRepository $userRepo;    private TeacherRequest $teacherRequest;    /**     * TeacherController constructor.     */    public function __construct ()    {        $this->groupRepo = new GroupRepository();        $this->lessonRepo = new LessonRepository();        $this->studentRepo = new StudentRepository();        $this->teacherRequest = new TeacherRequest();        $this->userRepo = new UserRepository();    }    /**     * settings page     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function settingsPage (Request $request)    {        return view('pages.teacher.settings');    }    /**     * Save new settings     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Http\RedirectResponse     * @throws \Illuminate\Validation\ValidationException     */    public function store (Request $request)    {        $rules = [            'login' => 'required|unique:users',            'password' => 'required',            'name' => 'required',            'link_vk' => 'required',            'phone_teacher' => 'required',        ];        $messages = [            'name.required' => 'Укажите своё имя',            'login.unique' => 'Такой пользователь уже есть',            'password.required' => 'Укажите свой пароль',            'login.required' => 'Укажите свой логин',            'phone_teacher.required' => 'Укажите свой логин',            'link_vk.required' => 'Укажите свой VK',        ];        Validator::make($request->all(), $rules, $messages)->validate();        $this->userRepo->updateTeacher(Auth::id(), $request);        session()->flash('success', 'Вы успешно обновили свои данные');        return redirect()->back();    }    /**     * index page     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function show (Request $request)    {        $groups = Group::select()            ->where([                [                    'teacher_id',                    Auth::user()->id,                ],                [                    'archive',                    0,                ],            ])           ->get();        $archived_groups = Group::select()           ->where([                [                    'teacher_id',                    Auth::user()->id,                ],                [                    'archive',                    1,                ],            ])           ->get();       $ages = [            1 => 'Школьники',            2 => 'Студенты',            3 => 'Взрослые',        ];        return view('pages.teacher.index', compact('groups', 'ages', 'archived_groups'));    }    /**     * create group     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function groupForm ()    {        $students = User::select()            ->where('role_id', Roles::STUDENT)            ->get();        return view('pages.teacher.newgroup', compact('students'));    }    /**     * edit group (page)     * @param \Illuminate\Http\Request $request     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function editPage (Request $request, $group_id)    {        $group_info = Group::find($group_id);        $student_ids = $this->studentRepo->getStudentIdByGroupId($group_id);        $students = [];        foreach ( $student_ids as $id ) {            $students[] = User::select('name', 'id')->where('id', $id->student_id)->first();        }        return view('pages.teacher.edit', compact('group_info', 'students'));    }    /**     * save changes     * @param \Illuminate\Http\Request $request     * @param $group_id     * @return \Illuminate\Http\RedirectResponse     * @throws \Illuminate\Validation\ValidationException     */    public function edit (Request $request, $group_id)    {        $group = $this->groupRepo->findGroupById($group_id);        $messages = [            'name_group.required' => 'Укажите название группы',            'technology.required' => 'Укажите технологию, изучаемые в группе',            'schedule.required' => 'Укажите свое расписание',            'age.required' => 'Укажите возраст учеников',            'year.required' => 'Укажите год обучения',        ];        $validator = Validator::make($request->all(), $this->teacherRequest->rules(), $messages)->validate();        if ( !empty($request->users) ) {            $this->studentRepo->kickStudents($request, $group_id);        }        $group->name_group = $request->name_group;        $group->technology = $request->technology;        $group->schedule = $request->schedule;        $group->age = $request->age;        $group->year = $request->year;        $group->save();        session()->flash('success', 'Вы успешно обновили данные о группе');        return redirect()->back();    }    /**     * save group     * @param \Illuminate\Http\Request $request     * @return \Illuminate\Http\RedirectResponse     * @throws \Illuminate\Validation\ValidationException     */    public function group (Request $request)    {        $model = new Teacher();        $rules = [            'name_group' => 'required|unique:groups',            'technology' => 'required',            'schedule' => 'required',            'year' => 'required',            'age' => 'required',        ];        $messages = [            'name_group.required' => 'Укажите название группы',            'name_group.unique' => 'Такая группа уже есть',            'technology.required' => 'Укажите изучаемую технологию',            'schedule.required' => 'Укажите расписание',            'year.required' => 'Укажите год обучения',            'age.required' => 'Укажите возраст учеников',        ];       $validator = Validator::make($request->all(), $rules, $messages)->validate();       $model->createGroup($request, Auth::user());        session()->flash('success', 'Вы успешно создали новую группу');        return redirect()->back();    }    /**     * page where you can add student to group     * @param \Illuminate\Http\Request $request     * @param $group_id     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View     */    public function addstudentPage (Request $request, $group_id)    {        $users = $this->studentRepo->getFreeStudents($group_id);        return view("pages.teacher.addstudent", compact('users'));    }    /**     * save new student in the group     * @param \Illuminate\Http\Request $request     * @param $id     * @return \Illuminate\Http\RedirectResponse     */    public function saveNewStudent (Request $request, $id)    {        foreach ( $request->logins as $key => $value ) {            StudentGroups::create([                "student_id" => $value,               "group_id" => $id,                "exempt" => 0           ]);        }        session()->flash("success", "Ученик(и) успешно добавлен(ы)");        return redirect()->back();    }}